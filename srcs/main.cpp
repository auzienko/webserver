/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: zcris <zcris@student.42.fr>                +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/02/07 10:10:48 by zcris             #+#    #+#             */
/*   Updated: 2022/03/10 08:45:13 by zcris            ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/main.hpp"

int main(int argc, char** argv) {
  if (argc != 2) {
    ws::printE(ERROR_PROGRAM_ARGS, "\n");
    return -1;
  }
  try {
    Webserver_manager wsm(argv[1]);
    wsm.start();    
  } catch (std::exception) {
    ws::printE(ERROR_SERVER_START, "\n");
    return -1;
  }
  return 0;
}

// **Схема открытия соединения.**

// Наример 127.0.0.1:8080

// - Создаем сокет через команду socket (возвращает файловый дескриптор)
// - далее делаем bind (привязывает к сокету ip адрес и порт), важно проверять
// т.к. может зафейлиться.
// - Listen
// - kqueue отслеживаем файловый дескриптор из пункта 1. (когда клиент
// подключится его вернет данный системный вызов)
// - После подключения необходимо сделать accept(fd) возвращает в свою очередь
// фд  (client_fd)куда клиент будет писать запрос, а сервер отдавать ответ.
// После ответа не надо закрывать сразу же этот фд (если клиент не прислал в
// хедере коннектион клозе (или keep Alive), если прислал коннектион клозе то
// закрыть сразу после отправки ответа). Как долго деражать открытым соединение?
// есть параметры timeout и max.
// - этот client_fd надо также добавить например в kqueue чтобы его отслеживать.
// Когда сработает то вернет структуру с размером и флагами состояния.
// - Прочитали запрос, нашли двойно /r/n ( 0 r/n r/n) обработали тело (было оно
// и нет. у разных запросов по разному)
// - Понимаем к какому ресурсу обращен запрос.
